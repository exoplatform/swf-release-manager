#!/usr/bin/groovy
@NonCPS
def jsonParser(def json) {
    new groovy.json.JsonSlurperClassic().parse(json)
}

@NonCPS
def createBasicAuthString(credentials) {
    def authString = credentials.getBytes().encodeBase64().toString();
    [Authorization: "Basic " + authString]
}

def doCleanM2Cache(taskID) {
   def m2cacheVolumeName = "${taskID}-m2_cache"
   stage ("[Cleanup] Remove Maven Cache for Task ID: ${taskID}") {
       def createdAt = sh(returnStdout: true, script: "sudo docker volume inspect -f '{{ .CreatedAt }}' ${m2cacheVolumeName} 2>/dev/null || :").trim()
       if (!!createdAt) {
            echo "Dropping Maven cache volume ${m2cacheVolumeName}. Creation date: ${createdAt}."
            sh "sudo docker volume rm ${m2cacheVolumeName}"
       } else {
            echo "Warning: Maven cache volume ${m2cacheVolumeName} does not exist!"
       }
   }
}

def doClean(taskID, projectname, action, isInParallel) {

   def entity_name = ""
   def docker_command = ""
   def docker_inspect_command = ""

   if (action == "clean-all") {
        // Placeholder for future implementation
   } else if (action == "clean-containers") {
       entity_name = "${taskID}-${projectname}"
       docker_command = "rm -f"
       docker_inspect_command = "inspect -f '{{ .Created }}'"
   } else if (action == "clean-volumes") {
       entity_name = "${taskID}-${projectname}-workspace"
       docker_command = "volume rm"
       docker_inspect_command = "volume inspect -f '{{ .CreatedAt }}'"
   }

   stage ("[Cleanup] ${action.capitalize()} for Project: ${projectname} (Task ID: ${taskID})") {
       def createdAt = sh(returnStdout: true, script: "sudo docker ${docker_inspect_command} ${entity_name} 2>/dev/null || :").trim()
       if (!!createdAt) {
            echo "Dropping ${entity_name}. Creation date: ${createdAt}."
            sh "sudo docker ${docker_command} ${entity_name}"
       } else {
            echo "Warning: ${entity_name} does not exist!"
       }
   }
}

def doCleans(taskID, projectsToClean, action, cleanM2Cache, isInParallel, catalogCredentialsId) {
    def catalogURL = "${CATALOG_BASE_URL}/${TASK_ID}.json"

    if (cleanM2Cache) {
        doCleanM2Cache(taskID)
    }

    def catalogRequestParameters = [:]
    def withCatalogCredentials = false
    if (catalogCredentialsId) {
        withCredentials([usernamePassword(credentialsId: catalogCredentialsId, usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
            catalogRequestParameters += createBasicAuthString("${USER}:${PASSWORD}")
        }
        withCatalogCredentials = true
    }
    echo "Downloading catalog from ${catalogURL} (Using Credentials: ${withCatalogCredentials})"

    def JSONCatalog = new URL(catalogURL)
    def catalog = jsonParser(JSONCatalog.newReader(requestProperties: catalogRequestParameters))    
    echo "Projects in Catalog: " + catalog.size()
    def catalogNames = catalog.collect { it.name }

    if (projectsToClean[0]?.equals('*')) {
        catalogNames.each { doClean(taskID, it, action, isInParallel) }
    } else {
        projectsToClean.each {
            if (catalogNames.contains(it)) {
                doClean(taskID, it, action, isInParallel)
            }
        }
    }
}

def nodes = [:]
nodesByLabel('docker').each {
    nodes[it] = { ->
        return node(it) {
            def taskID = "${TASK_ID}"
            def action = "${ACTION}"
            def p = "${PROJECTS}"
            def projectsToClean = p.split(',')
            def isInParallel = false
            def catalogCredentialsId = env.CATALOG_CREDENTIALS_ID ?: ''
            def cleanM2Cache = CLEAN_M2_CACHE?.toBoolean() ?: false

            stage ("[Initialization] Prepare Parameters for Cleanup") {
                echo "* Projects: ${PROJECTS}"
                echo "* Command: ${ACTION}"
                echo "* Clean Maven Cache: ${cleanM2Cache}"
                echo "* Credentials ID: ${catalogCredentialsId}"
                echo "* Agent Node: ${it}"
            }

            stage ("[Execution] Start Cleanup Process for Task ID: ${TASK_ID}") {
                doCleans(taskID, projectsToClean, action, cleanM2Cache, isInParallel, catalogCredentialsId)
            }
        }
    }()
}
